DCNv2 compiled correctly
Creating model...
=> loading pretrained model https://download.pytorch.org/models/resnet18-5c106cde.pth
=> init deconv weights from normal distribution
Namespace(K=100, annot_name='random_circle3', arch='resdcn_18', batch_size=32, cat_spec_wh=False, center_thresh=0.1, chunk_sizes=[16, 16], data_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../data', dataset='random_synthetic', debug=0, debug_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line/random_10k_circle3/debug', debugger_theme='white', demo='', demo_out='', dense_wh=False, device=device(type='cuda'), down_ratio=4, eval_oracle_hm=False, eval_oracle_offset=False, eval_oracle_wh=False, exp_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line', exp_id='random_10k_circle3', fix_res=False, flip=0.5, flip_test=False, gpus=[0, 1], gpus_str='0,1', head_conv=64, heads={'hm': 1, 'wh': 2, 'reg': 2}, hide_data_time=False, hm_weight=1, input_h=480, input_res=640, input_w=640, keep_res=False, load_model='', lr=0.000125, lr_step=[90, 120], master_batch_size=16, mean=array([[[0.40789655, 0.44719303, 0.47026116]]], dtype=float32), metric='loss', mse_loss=False, nms=False, no_color_aug=False, norm_wh=False, not_cuda_benchmark=False, not_rand_crop=False, not_reg_offset=False, num_classes=1, num_epochs=50, num_iters=-1, num_stacks=1, num_workers=4, off_weight=1, output_h=120, output_res=160, output_w=160, pad=31, print_iter=0, reg_loss='l1', reg_offset=True, resume=False, root_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../..', rotate=0, save_all=False, save_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line/random_10k_circle3', scale=1, seed=317, shift=0.1, std=array([[[0.2886383 , 0.27408165, 0.27809834]]], dtype=float32), task='line', test=False, test_scales=[1.0], trainval=False, val_intervals=5, vis_thresh=0.3, wh_weight=0.1)
Setting up data...
==> initializing random_circle3 "val" data.
loading annotations into memory...
Done (t=0.01s)
creating index...
index created!
Loaded val 1000 samples
==> initializing random_circle3 "train" data.
loading annotations into memory...
Done (t=0.11s)
creating index...
index created!
Loaded train 10000 samples
Starting training...
Epoch 1 finished
Epoch 2 finished
Epoch 3 finished
Epoch 4 finished
Epoch 5 finished
Epoch 6 finished
Epoch 7 finished
Epoch 8 finished
Epoch 9 finished
Epoch 10 finished
Epoch 11 finished
Epoch 12 finished
Epoch 13 finished
Epoch 14 finished
Epoch 15 finished
Epoch 16 finished
Epoch 17 finished
Epoch 18 finished
Epoch 19 finished
Epoch 20 finished
Epoch 21 finished
Epoch 22 finished
Epoch 23 finished
Epoch 24 finished
Epoch 25 finished
Epoch 26 finished
Epoch 27 finished
Epoch 28 finished
Epoch 29 finished
Epoch 30 finished
Epoch 31 finished
Epoch 32 finished
Epoch 33 finished
Epoch 34 finished
Epoch 35 finished
Epoch 36 finished
Epoch 37 finished
Epoch 38 finished
Epoch 39 finished
Epoch 40 finished
Epoch 41 finished
Epoch 42 finished
Epoch 43 finished
Epoch 44 finished
Epoch 45 finished
Epoch 46 finished
Epoch 47 finished
Epoch 48 finished
Epoch 49 finished
Epoch 50 finished
...training finished!
NMS not imported! If you need it, do 
 cd $CenterNet_ROOT/src/lib/external 
 make
Namespace(K=100, annot_name='random_circle3', arch='resdcn_18', batch_size=32, cat_spec_wh=False, center_thresh=0.1, chunk_sizes=[32], data_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../data', dataset='random_synthetic', debug=0, debug_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line/random_10k_circle3/debug', debugger_theme='white', demo='', demo_out='', dense_wh=False, down_ratio=4, eval_oracle_hm=False, eval_oracle_offset=False, eval_oracle_wh=False, exp_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line', exp_id='random_10k_circle3', fix_res=False, flip=0.5, flip_test=False, gpus=[0], gpus_str='0', head_conv=64, heads={'hm': 1, 'wh': 2, 'reg': 2}, hide_data_time=False, hm_weight=1, input_h=480, input_res=640, input_w=640, keep_res=False, load_model='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line/random_10k_circle3/model_last.pth', lr=0.000125, lr_step=[90, 120], master_batch_size=32, mean=array([[[0.40789655, 0.44719303, 0.47026116]]], dtype=float32), metric='loss', mse_loss=False, nms=False, no_color_aug=False, norm_wh=False, not_cuda_benchmark=False, not_rand_crop=False, not_reg_offset=False, num_classes=1, num_epochs=140, num_iters=-1, num_stacks=1, num_workers=4, off_weight=1, output_h=120, output_res=160, output_w=160, pad=31, print_iter=0, reg_loss='l1', reg_offset=True, resume=True, root_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../..', rotate=0, save_all=False, save_dir='/scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line/random_10k_circle3', scale=1, seed=317, shift=0.1, std=array([[[0.2886383 , 0.27408165, 0.27809834]]], dtype=float32), task='line', test=False, test_scales=[1.0], trainval=False, val_intervals=5, vis_thresh=0.3, wh_weight=0.1)
==> initializing random_circle3 "val" data.
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
Loaded val 1000 samples
Creating model...
=> loading pretrained model https://download.pytorch.org/models/resnet18-5c106cde.pth
=> init deconv weights from normal distribution
loaded /scratch_net/biwidl213/silvasta/bachelor-thesis-line-detection/CenterLine/src/lib/../../exp/line/random_10k_circle3/model_last.pth, epoch 50
Loading and preparing results...
DONE (t=0.55s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=10.65s).
Accumulating evaluation results...
DONE (t=1.08s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.202
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.245
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.223
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.263
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.282
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.235
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.721
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.122
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.600
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.862
